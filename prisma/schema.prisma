generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Album {
  id            String         @id @unique(map: "album_id_unique") @db.Uuid
  artistId      String         @map("artist_id") @db.Uuid
  title         String         @db.VarChar(255)
  artworkUrl    String?        @map("artwork_url") @db.VarChar(255)
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?      @default(now()) @map("updated_at") @db.Timestamptz(6)
  description   String?        @db.VarChar(1000)
  deleted       Boolean?       @default(false)
  genreId       Int?           @map("genre_id")
  subgenreId    Int?           @map("subgenre_id")
  isDraft       Boolean?       @default(false) @map("is_draft")
  publishedAt   DateTime?      @default(now()) @map("published_at") @db.Timestamptz(6)
  msatTotal     BigInt         @default(0) @map("msat_total")
  artist        Artist         @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_artist_id_foreign")
  musicGenre    MusicGenre?    @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_genre_id_foreign")
  musicSubgenre MusicSubgenre? @relation(fields: [subgenreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_subgenre_id_foreign")
  track         Track[]

  @@index([artistId], map: "idx_album_artist_id")
  @@map("album")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Amp {
  id               Int       @id @default(autoincrement())
  trackId          String    @map("track_id") @db.Uuid
  userId           String    @map("user_id") @db.VarChar(255)
  msatAmount       Int       @map("msat_amount")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  comment          Boolean   @default(false)
  feeMsat          Int?      @default(0) @map("fee_msat")
  type             Int?
  typeKey          Int?      @map("type_key")
  txId             String?   @map("tx_id") @db.Uuid
  timeSplitSource  String?   @map("time_split_source") @db.Uuid
  splitDestination String?   @map("split_destination") @db.VarChar(64)
  contentType      String?   @default("track") @map("content_type") @db.VarChar(12)

  @@index([trackId], map: "idx_amp_track_id")
  @@index([userId], map: "idx_amp_user_id")
  @@index([contentType], map: "idx_amp_content_type")
  @@index([txId], map: "idx_amp_split")
  @@index([splitDestination], map: "idx_amp_split_destination")
  @@index([timeSplitSource], map: "idx_amp_time_split_source")
  @@map("amp")
}

model amp_type {
  id          Int       @id @default(autoincrement())
  description String?   @db.VarChar(64)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model Artist {
  id         String    @id @unique(map: "artist_id_unique") @db.Uuid
  userId     String    @map("user_id") @db.VarChar(255)
  name       String    @db.VarChar(255)
  artworkUrl String?   @map("artwork_url") @db.VarChar(255)
  artistUrl  String    @unique(map: "artist_artist_url_unique") @map("artist_url") @db.VarChar(255)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  bio        String?   @db.VarChar(200)
  twitter    String?   @db.VarChar(255)
  instagram  String?   @db.VarChar(255)
  youtube    String?   @db.VarChar(255)
  website    String?   @db.VarChar(255)
  deleted    Boolean?  @default(false)
  verified   Boolean?  @default(false)
  npub       String?   @db.VarChar(64)
  msatTotal  BigInt    @default(0) @map("msat_total")
  album      Album[]
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_user_id_foreign")
  track      Track[]

  @@index([artistUrl], map: "idx_artist_url")
  @@index([userId], map: "idx_artist_user_id")
  @@map("artist")
}

model comment {
  id          Int       @id @default(autoincrement())
  userId      String    @map("user_id") @db.VarChar(255)
  ampId       Int       @map("amp_id")
  content     String?
  parentId    Int?      @map("parent_id")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  txId        String?   @map("tx_id") @db.Uuid
  contentId   String?   @map("content_id") @db.Uuid
  contentType String?   @default("track") @map("content_type") @db.VarChar(12)
  isNostr     Boolean?  @default(false) @map("is_nostr")

  @@index([parentId], map: "idx_comment_parent_id")
  @@index([userId], map: "idx_comment_user_id")
  @@index([contentId], map: "idx_comment_content_id")
}

model event_track {
  event_id   String    @id @unique(map: "event_track_event_id_unique") @db.VarChar(64)
  track_id   String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([event_id], map: "idx_event_id")
}

model ExternalReceive {
  id          Int       @id @default(autoincrement())
  settleIndex Int?      @map("settle_index")
  preimage    String?   @db.VarChar(64)
  trackId     String?   @map("track_id") @db.Uuid
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  paymentHash String?   @map("payment_hash") @db.VarChar(255)
  externalId  String?   @map("external_id") @db.VarChar(255)
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)

  @@map("external_receive")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model Play {
  id        Int       @id @default(autoincrement())
  trackId   String    @map("track_id") @db.Uuid
  userId    String    @map("user_id") @db.VarChar(255)
  complete  Boolean
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  userAgent String?   @map("user_agent")

  @@index([trackId], map: "idx_play_track_id")
  @@index([userId], map: "idx_play_user_id")
  @@map("play")
}

model Playlist {
  id          String    @id @unique(map: "playlist_id_unique") @db.Uuid
  userId      String    @map("user_id") @db.VarChar(64)
  title       String    @db.VarChar(255)
  isFavorites Boolean?  @default(false) @map("is_favorites")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([userId], map: "idx_playlist_user_id")
  @@map("playlist")
}

model PlaylistTrack {
  id         Int       @id @default(autoincrement())
  trackId    String    @map("track_id") @db.Uuid
  playlistId String    @map("playlist_id") @db.Uuid
  order      String    @db.VarChar(16)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([playlistId], map: "idx_playlist_track_playlist_id")
  @@map("playlist_track")
}

model RankingForty {
  id        Int       @id @default(autoincrement())
  trackId   String    @map("track_id") @db.VarChar(255)
  rank      Int       @default(1)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([trackId], map: "idx_ranking_forty_track_id")
  @@map("ranking_forty")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Track {
  id              String    @id @unique(map: "track_id_unique") @db.Uuid
  artistId        String    @map("artist_id") @db.Uuid
  albumId         String    @map("album_id") @db.Uuid
  title           String    @db.VarChar(255)
  order           Int
  playCount       Int?      @default(0) @map("play_count")
  msatTotal       BigInt?   @default(0) @map("msat_total")
  liveUrl         String    @map("live_url") @db.VarChar(255)
  rawUrl          String?   @map("raw_url") @db.VarChar(128)
  size            Int?
  duration        Int?
  deleted         Boolean?  @default(false)
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  lyrics          String?
  isProcessing    Boolean?  @default(false) @map("is_processing")
  compressorError Boolean?  @default(false) @map("compressor_error")
  isDraft         Boolean?  @default(false) @map("is_draft")
  publishedAt     DateTime? @default(now()) @map("published_at") @db.Timestamptz(6)
  album           Album     @relation(fields: [albumId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_album_id_foreign")
  artist          Artist    @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_artist_id_foreign")

  @@index([albumId], map: "idx_track_album_id")
  @@index([artistId], map: "idx_track_artist_id")
  @@map("track")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transaction {
  id              Int       @id @default(autoincrement())
  user_id         String    @db.VarChar(255)
  pre_tx_balance  BigInt
  payment_request String    @db.VarChar(700)
  payment_hash    String?
  fee_msat        Int?
  msat_amount     BigInt
  withdraw        Boolean
  success         Boolean?
  failure_reason  String?   @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  is_pending      Boolean   @default(false)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  external_id     String?   @db.VarChar(255)
  preimage        String?   @db.VarChar(255)
  user            User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_user_id_foreign")

  @@index([user_id], map: "idx_transaction_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model User {
  id                  String             @id @unique(map: "user_id_unique") @db.VarChar(64)
  name                String             @unique(map: "user_name_unique") @db.VarChar(255)
  msatBalance         BigInt?            @default(0) @map("msat_balance")
  ampMsat             Int?               @default(1000) @map("amp_msat")
  createdAt           DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?          @default(now()) @map("updated_at") @db.Timestamptz(6)
  isLocked            Boolean            @default(false) @map("is_locked")
  artworkUrl          String?            @map("artwork_url") @db.VarChar(255)
  lastActivityCheckAt DateTime?          @default(now()) @map("last_activity_check_at") @db.Timestamptz(6)
  profileUrl          String?            @unique(map: "user_profile_url_unique") @map("profile_url") @db.VarChar(255)
  artist              Artist[]
  external_payment    ExternalPayment[]
  podcast             Podcast[]
  split_recipient     SplitRecipient[]
  subscriber          Subscriber?
  transaction         transaction[]
  user_flag           UserFlag[]
  wallet_connection   WalletConnection[]

  @@index([profileUrl], map: "idx_profile_url")
  @@map("user")
}

model MusicGenre {
  id            Int             @id @default(autoincrement())
  name          String          @unique(map: "music_genre_name_unique") @db.VarChar(64)
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  album         Album[]
  musicSubgenre MusicSubgenre[]

  @@index([name], map: "idx_music_genre_name")
  @@map("music_genre")
}

model MusicSubgenre {
  id         Int        @id @default(autoincrement())
  genreId    Int        @map("genre_id")
  name       String     @unique(map: "music_subgenre_name_unique") @db.VarChar(64)
  createdAt  DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  album      Album[]
  musicGenre MusicGenre @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "music_subgenre_genre_id_foreign")

  @@index([name], map: "idx_music_subgenre_name")
  @@map("music_subgenre")
}

model Subscriber {
  userId         String    @id @unique(map: "subscriber_user_id_unique") @map("user_id") @db.VarChar(64)
  provider       String    @db.VarChar(255)
  providerUserId String    @map("provider_user_id") @db.VarChar(255)
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriber_user_id_foreign")

  @@map("subscriber")
}

model Episode {
  id               String    @id @unique(map: "episode_id_unique") @db.Uuid
  title            String    @db.VarChar(255)
  description      String?   @db.VarChar(1000)
  podcastId        String    @map("podcast_id") @db.Uuid
  order            Int
  playCount        Int?      @default(0) @map("play_count")
  msatTotal        BigInt?   @default(0) @map("msat_total")
  liveUrl          String    @map("live_url") @db.VarChar(255)
  rawUrl           String?   @map("raw_url") @db.VarChar(128)
  size             Int?
  duration         Int?
  deleted          Boolean?  @default(false)
  isDraft          Boolean?  @default(true) @map("is_draft")
  isProcessing     Boolean?  @default(false) @map("is_processing")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  publishedAt      DateTime? @default(now()) @map("published_at") @db.Timestamptz(6)
  compressor_error Boolean?  @default(false)
  podcast          Podcast   @relation(fields: [podcastId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "episode_podcast_id_foreign")

  @@index([podcastId], map: "idx_episode_podcast_id")
  @@map("episode")
}

model Podcast {
  id                                                                        String              @id @unique(map: "podcast_id_unique") @db.Uuid
  userId                                                                    String              @map("user_id") @db.VarChar(255)
  name                                                                      String              @db.VarChar(255)
  artworkUrl                                                                String?             @map("artwork_url") @db.VarChar(255)
  podcastUrl                                                                String              @unique(map: "podcast_podcast_url_unique") @map("podcast_url") @db.VarChar(255)
  description                                                               String?             @db.VarChar(1000)
  createdAt                                                                 DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                                 DateTime?           @default(now()) @map("updated_at") @db.Timestamptz(6)
  publishedAt                                                               DateTime?           @default(now()) @map("published_at") @db.Timestamptz(6)
  deleted                                                                   Boolean?            @default(false)
  isDraft                                                                   Boolean?            @default(true) @map("is_draft")
  twitter                                                                   String?             @db.VarChar(255)
  instagram                                                                 String?             @db.VarChar(255)
  youtube                                                                   String?             @db.VarChar(255)
  website                                                                   String?             @db.VarChar(255)
  npub                                                                      String?             @db.VarChar(255)
  primaryCategoryId                                                         Int?                @map("primary_category_id")
  secondaryCategoryId                                                       Int?                @map("secondary_category_id")
  primarySubcategoryId                                                      Int?                @map("primary_subcategory_id")
  secondarySubcategoryId                                                    Int?                @map("secondary_subcategory_id")
  isFeatured                                                                Boolean             @default(false) @map("is_featured")
  msatTotal                                                                 BigInt              @default(0) @map("msat_total")
  episode                                                                   Episode[]
  podcast_category_podcast_primary_category_idTopodcast_category            podcastCategory?    @relation("podcast_primary_category_idTopodcast_category", fields: [primaryCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "podcast_primary_category_id_foreign")
  podcast_subcategory_podcast_primary_subcategory_idTopodcast_subcategory   podcastSubcategory? @relation("podcast_primary_subcategory_idTopodcast_subcategory", fields: [primarySubcategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "podcast_primary_subcategory_id_foreign")
  podcast_category_podcast_secondary_category_idTopodcast_category          podcastCategory?    @relation("podcast_secondary_category_idTopodcast_category", fields: [secondaryCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "podcast_secondary_category_id_foreign")
  podcast_subcategory_podcast_secondary_subcategory_idTopodcast_subcategory podcastSubcategory? @relation("podcast_secondary_subcategory_idTopodcast_subcategory", fields: [secondarySubcategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "podcast_secondary_subcategory_id_foreign")
  user                                                                      User                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "podcast_user_id_foreign")

  @@index([podcastUrl], map: "idx_podcast_url")
  @@index([userId], map: "idx_podcast_user_id")
  @@map("podcast")
}

model zap_request {
  payment_hash String    @id @unique(map: "zap_request_payment_hash_unique") @db.VarChar(255)
  event_id     String?   @db.VarChar(64)
  event        String
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([payment_hash], map: "idx_zap_payment_hash")
}

model Split {
  id              Int              @id @default(autoincrement())
  contentId       String           @unique(map: "split_content_id_unique") @map("content_id") @db.Uuid
  contentType     String?          @default("track") @map("content_type") @db.VarChar(12)
  createdAt       DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  splitRecipients SplitRecipient[]

  @@index([contentType], map: "idx_split_content_type")
  @@index([contentId], map: "idx_split_content_id")
  @@map("split")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model SplitRecipient {
  id        Int       @id @default(autoincrement())
  splitId   Int       @map("split_id")
  userId    String    @map("user_id") @db.VarChar(64)
  share     Int       @db.SmallInt
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  split     Split     @relation(fields: [splitId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "split_recipient_split_id_foreign")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "split_recipient_user_id_foreign")

  @@index([splitId], map: "idx_split_recipient_split_id")
  @@index([userId], map: "idx_split_recipient_user_id")
  @@map("split_recipient")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model TimeSplit {
  id                 Int       @id @default(autoincrement())
  contentId          String    @map("content_id") @db.Uuid
  shareNumerator     Int       @map("share_numerator") @db.SmallInt
  shareDenominator   Int       @map("share_denominator") @db.SmallInt
  startSeconds       Int       @map("start_seconds") @db.SmallInt
  endSeconds         Int       @map("end_seconds") @db.SmallInt
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  recipientContentId String    @map("recipient_content_id") @db.Uuid

  @@index([contentId], map: "idx_time_split_content_id")
  @@map("time_split")
}

model library {
  id         Int       @id @default(autoincrement())
  user_id    String
  content_id String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "idx_library_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Preamp {
  txId       String    @id @map("tx_id") @db.Uuid
  msatAmount Int       @map("msat_amount")
  guid       String?
  podcast    String?
  feedId     Int?      @map("feed_id")
  episode    String?
  itemId     Int?      @map("item_id")
  ts         Int?
  appName    String?   @map("app_name")
  senderName String?   @map("sender_name")
  userId     String    @map("user_id")
  contentId  String    @map("content_id") @db.Uuid
  createdAt  DateTime? @map("created_at") @db.Timestamptz(6)

  @@map("preamp")
}

model feature_flag {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  userFlag UserFlag[]
}

model UserFlag {
  id            Int          @id @default(autoincrement())
  userId        String       @map("user_id") @db.VarChar(255)
  featureFlagId Int          @map("feature_flag_id")
  featureFlag   feature_flag @relation(fields: [featureFlagId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_flag_feature_flag_id_foreign")
  user          User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_flag_user_id_foreign")

  @@index([featureFlagId], map: "idx_user_feature_flag_id")
  @@index([userId], map: "idx_user_flag_id")
  @@map("user_flag")
}

model ExternalFeed {
  guid  String @id @unique(map: "external_feed_guid_unique") @db.Uuid
  title String

  @@map("external_feed")
}

model ExternalPayment {
  id           Int       @id @default(autoincrement())
  userId       String    @map("user_id")
  paymentIndex String?   @map("payment_index")
  msatAmount   Int       @map("msat_amount")
  feeMsat      Int       @map("fee_msat")
  pubkey       String
  message      String?
  podcast      String?
  guid         String?
  feedId       Int?      @map("feed_id")
  episode      String?
  episodeGuid  String?   @map("episode_guid")
  ts           Int?
  isSettled    Boolean   @map("is_settled")
  name         String?
  txId         String?   @map("tx_id") @db.Uuid
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  external_id  Boolean?
  isPending    Boolean?  @default(true) @map("is_pending")
  user         User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "external_payment_user_id_foreign")

  @@map("external_payment")
}

model WalletConnection {
  pubkey                 String                   @id
  userId                 String                   @map("user_id")
  name                   String?
  lastUsed               DateTime?                @map("last_used") @db.Timestamptz(6)
  pay_invoice            Boolean?
  get_balance            Boolean?
  make_invoice           Boolean?
  lookup_invoice         Boolean?
  msatBudget             Int                      @map("msat_budget")
  maxMsatPaymentAmount   Int                      @map("max_msat_payment_amount")
  deleted                Boolean                  @default(false)
  nwc_wallet_transaction nwc_wallet_transaction[]
  user                   User                     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wallet_connection_user_id_foreign")

  @@map("wallet_connection")
}

model nwc_wallet_transaction {
  id                Int              @id @default(autoincrement())
  pubkey            String
  msatAmount        Int              @map("msat_amount")
  createdAt         DateTime         @map("created_at") @db.Timestamptz(6)
  wallet_connection WalletConnection @relation(fields: [pubkey], references: [pubkey], onDelete: NoAction, onUpdate: NoAction, map: "nwc_wallet_transaction_pubkey_foreign")
}

model podcastCategory {
  id                                                      Int                  @id @default(autoincrement())
  name                                                    String               @unique(map: "podcast_category_name_unique") @db.VarChar(64)
  created_at                                              DateTime?            @default(now()) @db.Timestamptz(6)
  podcast_podcast_primary_category_idTopodcast_category   Podcast[]            @relation("podcast_primary_category_idTopodcast_category")
  podcast_podcast_secondary_category_idTopodcast_category Podcast[]            @relation("podcast_secondary_category_idTopodcast_category")
  podcast_subcategory                                     podcastSubcategory[]

  @@index([name], map: "idx_podcast_category_name")
  @@map("podcast_category")
}

model podcastSubcategory {
  id                                                            Int             @id @default(autoincrement())
  category_id                                                   Int
  name                                                          String          @unique(map: "podcast_subcategory_name_unique") @db.VarChar(64)
  created_at                                                    DateTime?       @default(now()) @db.Timestamptz(6)
  podcast_podcast_primary_subcategory_idTopodcast_subcategory   Podcast[]       @relation("podcast_primary_subcategory_idTopodcast_subcategory")
  podcast_podcast_secondary_subcategory_idTopodcast_subcategory Podcast[]       @relation("podcast_secondary_subcategory_idTopodcast_subcategory")
  podcast_category                                              podcastCategory @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "podcast_subcategory_category_id_foreign")

  @@index([name], map: "idx_podcast_subcategory_name")
  @@map("podcast_subcategory")
}

model npub {
  public_hex String    @id @unique(map: "npub_public_hex_unique") @db.VarChar(255)
  metadata   Json?
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

view TrackInfo {
  id              String    @unique @db.Uuid
  title           String?   @db.VarChar(255)
  artist          String?   @db.VarChar(255)
  artistUrl       String?   @map("artist_url") @db.VarChar(255)
  avatarUrl       String?   @map("avatar_url") @db.VarChar(255)
  userId          String?   @map("user_id") @db.VarChar(255)
  artworkUrl      String?   @map("artwork_url") @db.VarChar(255)
  msatTotal30Days BigInt?   @map("msat_total_30_days")
  msatTotal7Days  BigInt?   @map("msat_total_7_days")
  msatTotal1Days  BigInt?   @map("msat_total_1_days")
  albumTitle      String?   @map("album_title") @db.VarChar(255)
  liveUrl         String?   @map("live_url") @db.VarChar(255)
  duration        Int?
  createdAt       DateTime? @map("created_at") @db.Timestamptz(6)
  albumId         String?   @map("album_id") @db.Uuid
  artistId        String?   @map("artist_id") @db.Uuid
  order           Int?
  isProcessing    Boolean?  @map("is_processing")
  msatTotal       BigInt?   @map("msat_total")
  publishedAt     DateTime? @map("published_at") @db.Timestamptz(6)
  isDraft         Boolean?  @map("is_draft")

  @@map("track_info")
}

view EpisodeInfo {
  id              String    @unique @db.Uuid
  title           String?   @db.VarChar(255)
  description     String?   @db.VarChar(1000)
  podcast         String?   @db.VarChar(255)
  podcastUrl      String?   @db.VarChar(255)
  artworkUrl      String?   @db.VarChar(255)
  msatTotal30Days BigInt?
  msatTotal7Days  BigInt?
  msatTotal1Days  BigInt?
  liveUrl         String?   @db.VarChar(255)
  duration        Int?
  createdAt       DateTime? @db.Timestamptz(6)
  podcastId       String?   @db.Uuid
  order           Int?
  isProcessing    Boolean?
  publishedAt     DateTime? @db.Timestamptz(6)
  isDraft         Boolean?
  userId          String?   @db.VarChar(255)

  @@map("episode_info")
}
