generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.VarChar(64)
  type       Int
  type_key   Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "idx_activity_user_id")
}

model Album {
  id             String         @id @unique(map: "album_id_unique") @db.Uuid
  artistId       String         @map("artist_id") @db.Uuid
  title          String         @db.VarChar(255)
  artworkUrl     String?        @map("artwork_url") @db.VarChar(255)
  createdAt      DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?      @default(now()) @map("updated_at") @db.Timestamptz(6)
  description    String?        @db.VarChar(1000)
  deleted        Boolean?       @default(false)
  genreId        Int?           @map("genre_id")
  subgenreId     Int?           @map("subgenre_id")
  is_draft       Boolean?       @default(false)
  published_at   DateTime?      @default(now()) @db.Timestamptz(6)
  artist         Artist         @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_artist_id_foreign")
  music_genre    MusicGenre?    @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_genre_id_foreign")
  music_subgenre MusicSubgenre? @relation(fields: [subgenreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "album_subgenre_id_foreign")
  track          Track[]

  @@index([artistId], map: "idx_album_artist_id")
  @@map("album")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Amp {
  id            Int       @id @default(autoincrement())
  track_id      String    @db.Uuid
  user_id       String    @db.VarChar(255)
  msat_amount   Int
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  source_region String?   @db.VarChar(255)
  comment       Boolean   @default(false)
  fee_msat      Int?      @default(0)
  type          Int?
  type_key      Int?

  @@index([track_id], map: "idx_amp_track_id")
  @@index([user_id], map: "idx_amp_user_id")
  @@map("amp")
}

model amp_type {
  id          Int       @id @default(autoincrement())
  description String?   @db.VarChar(64)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model Artist {
  id         String    @id @unique(map: "artist_id_unique") @db.Uuid
  userId     String    @map("user_id") @db.VarChar(255)
  name       String    @db.VarChar(255)
  artworkUrl String?   @map("artwork_url") @db.VarChar(255)
  artistUrl  String    @unique(map: "artist_artist_url_unique") @map("artist_url") @db.VarChar(255)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  bio        String?   @db.VarChar(200)
  twitter    String?   @db.VarChar(255)
  instagram  String?   @db.VarChar(255)
  youtube    String?   @db.VarChar(255)
  website    String?   @db.VarChar(255)
  deleted    Boolean?  @default(false)
  verified   Boolean?  @default(false)
  npub       String?   @db.VarChar(64)
  album      Album[]
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_user_id_foreign")
  track      Track[]

  @@index([artistUrl], map: "idx_artist_url")
  @@index([userId], map: "idx_artist_user_id")
  @@map("artist")
}

model comment {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.VarChar(255)
  amp_id     Int
  content    String    @db.VarChar(210)
  parent_id  Int?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([parent_id], map: "idx_comment_parent_id")
  @@index([user_id], map: "idx_comment_user_id")
}

model event_track {
  event_id   String    @id @unique(map: "event_track_event_id_unique") @db.VarChar(64)
  track_id   String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([event_id], map: "idx_event_id")
}

model external_receive {
  id           Int       @id @default(autoincrement())
  settle_index Int?
  preimage     String?   @db.VarChar(64)
  track_id     String?   @db.Uuid
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  payment_hash String?   @db.VarChar(255)
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model Play {
  id         Int       @id @default(autoincrement())
  trackId    String    @map("track_id") @db.Uuid
  userId     String    @map("user_id") @db.VarChar(255)
  complete   Boolean
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  userAgent  String?   @map("user_agent")

  @@index([trackId], map: "idx_play_track_id")
  @@index([userId], map: "idx_play_user_id")
  @@map("play")
}

model playlist {
  id           String    @id @unique(map: "playlist_id_unique") @db.Uuid
  user_id      String    @db.VarChar(64)
  title        String    @db.VarChar(255)
  is_favorites Boolean?  @default(false)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "idx_playlist_user_id")
}

model playlist_track {
  id          Int       @id @default(autoincrement())
  track_id    String    @db.Uuid
  playlist_id String    @db.Uuid
  order       String    @db.VarChar(16)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([playlist_id], map: "idx_playlist_track_playlist_id")
}

model ranking_forty {
  id         Int       @id @default(autoincrement())
  track_id   String    @db.VarChar(255)
  rank       Int       @default(1)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([track_id], map: "idx_ranking_forty_track_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Track {
  id              String    @id @unique(map: "track_id_unique") @db.Uuid
  artistId        String    @map("artist_id") @db.Uuid
  albumId         String    @map("album_id") @db.Uuid
  title           String    @db.VarChar(255)
  order           Int
  playCount       Int?      @default(0) @map("play_count")
  msatTotal       BigInt?   @default(0) @map("msat_total")
  liveUrl         String    @map("live_url") @db.VarChar(255)
  rawUrl          String?   @map("raw_url") @db.VarChar(128)
  size            Int?
  duration        Int?
  deleted         Boolean?  @default(false)
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  lyrics          String?
  isProcessing    Boolean?  @default(false) @map("is_processing")
  compressorError Boolean?  @default(false) @map("compressor_error")
  isDraft         Boolean?  @default(false) @map("is_draft")
  publishedAt     DateTime? @default(now()) @db.Timestamptz(6) @map("published_at")
  album           Album     @relation(fields: [albumId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_album_id_foreign")
  artist          Artist    @relation(fields: [artistId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "track_artist_id_foreign")

  @@index([albumId], map: "idx_track_album_id")
  @@index([artistId], map: "idx_track_artist_id")
  @@map("track")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transaction {
  id              Int       @id @default(autoincrement())
  user_id         String    @db.VarChar(255)
  pre_tx_balance  BigInt
  payment_request String    @db.VarChar(700)
  payment_hash    String    @db.VarChar(255)
  fee_msat        Int
  msat_amount     BigInt
  withdraw        Boolean
  success         Boolean
  failure_reason  String?   @db.VarChar(255)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  is_pending      Boolean   @default(false)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  user            User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_user_id_foreign")

  @@index([user_id], map: "idx_transaction_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model User {
  id                  String        @id @unique(map: "user_id_unique") @db.VarChar(64)
  name                String        @unique(map: "user_name_unique") @db.VarChar(255)
  msatBalance         BigInt?       @default(0) @map("msat_balance")
  ampMsat             Int?          @default(1000) @map("amp_msat")
  createdAt           DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?     @default(now()) @map("updated_at") @db.Timestamptz(6)
  isLocked            Boolean       @default(false) @map("is_locked")
  artworkUrl          String?       @map("artwork_url") @db.VarChar(255)
  lastActivityCheckAt DateTime?     @default(now()) @map("last_activity_check_at") @db.Timestamptz(6)
  profileUrl          String?       @unique(map: "user_profile_url_unique") @map("profile_url") @db.VarChar(255)
  artist              Artist[]
  podcast             podcast[]
  subscriber          Subscriber?
  transaction         transaction[]

  @@index([profileUrl], map: "idx_profile_url")
  @@map("user")
}

model zap_request {
  payment_hash String    @id @unique(map: "zap_request_payment_hash_unique") @db.VarChar(255)
  event_id     String?   @db.VarChar(64)
  event        String
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([payment_hash], map: "idx_zap_payment_hash")
}

model MusicGenre {
  id             Int             @id @default(autoincrement())
  name           String          @unique(map: "music_genre_name_unique") @db.VarChar(64)
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  album          Album[]
  music_subgenre MusicSubgenre[]

  @@index([name], map: "idx_music_genre_name")
  @@map("music_genre")
}

model MusicSubgenre {
  id          Int        @id @default(autoincrement())
  genreId     Int        @map("genre_id")
  name        String     @unique(map: "music_subgenre_name_unique") @db.VarChar(64)
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  album       Album[]
  music_genre MusicGenre @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "music_subgenre_genre_id_foreign")

  @@index([name], map: "idx_music_subgenre_name")
  @@map("music_subgenre")
}

model Subscriber {
  userId         String    @id @unique(map: "subscriber_user_id_unique") @map("user_id") @db.VarChar(64)
  provider       String    @db.VarChar(255)
  providerUserId String    @map("provider_user_id") @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  user           User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscriber_user_id_foreign")

  @@map("subscriber")
}

model episode {
  id               String    @id @unique(map: "episode_id_unique") @db.Uuid
  title            String    @db.VarChar(255)
  description      String?   @db.VarChar(1000)
  podcast_id       String    @db.Uuid
  order            Int
  play_count       Int?      @default(0)
  msat_total       BigInt?   @default(0)
  live_url         String    @db.VarChar(255)
  raw_url          String?   @db.VarChar(128)
  size             Int?
  duration         Int?
  deleted          Boolean?  @default(false)
  is_draft         Boolean?  @default(true)
  is_processing    Boolean?  @default(false)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  published_at     DateTime? @default(now()) @db.Timestamptz(6)
  compressor_error Boolean?  @default(false)
  podcast          podcast   @relation(fields: [podcast_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "episode_podcast_id_foreign")

  @@index([podcast_id], map: "idx_episode_podcast_id")
}

model podcast {
  id          String    @id @unique(map: "podcast_id_unique") @db.Uuid
  userId      String    @map("user_id") @db.VarChar(255)
  name        String    @db.VarChar(255)
  artworkUrl  String?   @map("artwork_url") @db.VarChar(255)
  podcastUrl  String    @unique(map: "podcast_podcast_url_unique") @map("podcast_url") @db.VarChar(255)
  description String?   @db.VarChar(1000)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  publishedAt DateTime? @default(now()) @map("published_at") @db.Timestamptz(6)
  deleted     Boolean?  @default(false)
  isDraft     Boolean?  @default(true) @map("is_draft")
  twitter     String?   @db.VarChar(255)
  instagram   String?   @db.VarChar(255)
  youtube     String?   @db.VarChar(255)
  website     String?   @db.VarChar(255)
  npub        String?   @db.VarChar(255)
  episode     episode[]
  user        User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "podcast_user_id_foreign")

  @@index([podcastUrl], map: "idx_podcast_url")
  @@index([userId], map: "idx_podcast_user_id")
}

view TrackInfo {
  id              String    @unique @db.Uuid
  title           String?   @db.VarChar(255)
  artist          String?   @db.VarChar(255)
  artistUrl       String?   @map("artist_url") @db.VarChar(255)
  avatarUrl       String?   @map("avatar_url") @db.VarChar(255)
  artworkUrl      String?   @map("artwork_url") @db.VarChar(255)
  msatTotal30Days BigInt?   @map("msat_total_30_days")
  msatTotal7Days  BigInt?   @map("msat_total_7_days")
  msatTotal1Days  BigInt?   @map("msat_total_1_days")
  albumTitle      String?   @map("album_title") @db.VarChar(255)
  liveUrl         String?   @map("live_url") @db.VarChar(255)
  duration        Int?
  createdAt       DateTime? @map("created_at") @db.Timestamptz(6)
  albumId         String?   @map("album_id") @db.Uuid
  artistId        String?   @map("artist_id") @db.Uuid
  order           Int?
  isProcessing    Boolean?  @map("is_processing")

  @@map("track_info")
}

view episode_info {
  id              String    @unique @db.Uuid
  title           String?   @db.VarChar(255)
  podcast         String?   @db.VarChar(255)
  podcastUrl      String?   @db.VarChar(255)
  artworkUrl      String?   @db.VarChar(255)
  msatTotal30Days BigInt?
  msatTotal7Days  BigInt?
  msatTotal1Days  BigInt?
  liveUrl         String?   @db.VarChar(255)
  duration        Int?
  createdAt       DateTime? @db.Timestamptz(6)
  podcastId       String?   @db.Uuid
  order           Int?
  isProcessing    Boolean?
}
