steps:
  # Migration
  - name: node:20.17.0
    id: install
    entrypoint: npm
    args: ["install"]
  - name: node:20.17.0
    id: build
    entrypoint: npm
    args: ["run", "build"]
  - name: node:20.17.0
    id: create env
    entrypoint: npm
    args: ["run", "create-env"]
    env:
      - "PG_HOST=${_PG_HOST}"
      - "PG_PORT=${_PG_PORT}"
      - "PG_DATABASE=${_PG_DATABASE}"
      - "PG_USER=${_PG_USER}"
    secretEnv: ["PG_PASSWORD"]
  - name: node:20.17.0
    id: migrate db
    entrypoint: npm
    args: ["run", "migrate"]
    env:
      - "PG_HOST=${_PG_HOST}"
      - "PG_PORT=${_PG_PORT}"
      - "PG_DATABASE=${_PG_DATABASE}"
      - "PG_USER=${_PG_USER}"
    secretEnv: ["PG_PASSWORD"]
  # Build the service container image
  - name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "us-central1-docker.pkg.dev/$PROJECT_ID/services/catalog:latest",
        "-f",
        "./Dockerfile",
        ".",
      ]
  # Push the container image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      ["push", "us-central1-docker.pkg.dev/$PROJECT_ID/services/catalog:latest"]
  # Deploy container image to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "catalog-prod",
        "--image",
        "us-central1-docker.pkg.dev/$PROJECT_ID/services/catalog:latest",
        "--region",
        "us-central1",
      ]
images:
  - "us-central1-docker.pkg.dev/$PROJECT_ID/services/catalog:latest"
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/WAVLAKE_SERVER_PROD_ADMIN_PASSWORD/versions/latest
      env: "PG_PASSWORD"
timeout: "900s"
options:
  logging: CLOUD_LOGGING_ONLY
  pool:
    name: projects/$PROJECT_ID/locations/us-central1/workerPools/build-pool
  dynamic_substitutions: true
